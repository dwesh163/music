import Head from 'next/head';
import { signIn, useSession } from 'next-auth/react';
import { useEffect, useState } from 'react';
import Player from '@/components/player';
import Menu from '@/components/menu';
import Loading from '@/components/loading';
import { useRouter } from 'next/router';

export default function Tracks() {
	const { data: session, status } = useSession();
	const router = useRouter();

	const [isLoading, setIsLoading] = useState(false);
	const [search, setSearch] = useState('');
	const [playlist, setPlaylist] = useState(undefined);
	const [results, setResults] = useState([]);
	const [songId, setSongId] = useState('');

	const fetchData = async () => {
		try {
			const response = await fetch('/api/tracks/search/', { method: 'POST', body: JSON.stringify({ songName: search }) });
			const tracksData = await response.json();
			setResults(tracksData);
			console.log(tracksData);
			setIsLoading(false);
		} catch (error) {
			console.error('Error fetching audio data:', error);
		}
	};

	const downloadSong = async (id) => {
		console.log(id);
		const response = await fetch('/api/tracks/', { method: 'POST', body: JSON.stringify({ spotifyId: id }) });
		const tracksData = await response.json();
		console.log(tracksData);
	};

	if (status == 'loading' || status == 'unauthenticated' || isLoading) {
		return <Loading status={isLoading ? 'loading' : status} />;
	}

	return (
		<>
			<Head>
				<title>Music</title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<main className="w-screen h-screen bg-[#171719]">
				<div className="w-full h-full relative flex overflow-hidden bg-[#171719]">
					<Player songId={songId} setSongId={setSongId} playlist={playlist} />
					<Menu />
					<div className="w-full h-full overflow-hidden">
						<div className="w-full p-7 pb-0">
							<h1 className=" text-3xl mb-0 font-extrabold leading-none tracking-tight text-gray-900 md:text-4xl lg:text-6xl dark:text-white">Search</h1>
						</div>

						<div className="w-full px-6 py-3">
							<label for="default-search" className="mb-2 text-sm font-medium text-gray-900 sr-only dark:text-white">
								Search
							</label>
							<div className="relative">
								<div className="absolute inset-y-0 start-0 flex items-center ps-3 pointer-events-none">
									<svg className="w-4 h-4 text-gray-500 " aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
										<path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z" />
									</svg>
								</div>
								<input type="search" className="block w-full p-4 ps-10 text-sm text-gray-100 rounded bg-[#27272b] focus:outline-none" placeholder="Search Tracks, Artists, Albums..." value={search} onChange={(event) => setSearch(event.target.value)} required />
								<button onClick={() => fetchData()} className="text-white absolute end-2.5 bottom-2 bg-[#00a5a5] hover:bg-[#038080] focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded text-sm px-4 py-2">
									Search
								</button>
							</div>
						</div>

						<div className="px-7 overflow-x-scroll h-[calc(100vh-250px)]">
							{results.error ? (
								<div className="text-white w-full h-full flex items-center justify-center">Song Not Found</div>
							) : (
								<table className="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400">
									<thead className="text-xs text-gray-900 uppercase dark:text-gray-400 w-full">
										<tr>
											<th scope="col" className="px-3 py-1 text-center">
												#
											</th>
											<th scope="col" className="px-0 py-3">
												Track
											</th>
											<th scope="col" className="px-6 py-3">
												Album
											</th>
											<th scope="col" className="px-6 py-3">
												Date
											</th>
											<th scope="col" className="px-6 py-3">
												Duration
											</th>
										</tr>
									</thead>
									<tbody>
										{results?.map((track, index) => (
											<tr key={index + '-track'} className="bg-[#11111170] hover:bg-[#1d1d1d70] group">
												<td className="relative">
													<div className="text-center flex items-center justify-center group-hover:text-transparent group-hover:cursor-pointer" onClick={() => downloadSong(track.id)}>
														<p className="text-base opacity-100 transition-opacity">{index}</p>
														<svg width="20" height="20" viewBox="0 0 25 25" fill="#fff" xmlns="http://www.w3.org/2000/svg" className="absolute opacity-0 group-hover:opacity-100">
															<path d="M6.76693 21.9879L6.75583 21.9956L6.74514 22.0038C6.45991 22.2232 6 22.0313 6 21.6001V3.40009C6 2.96889 6.45991 2.77699 6.74514 2.99641L6.75634 3.00501L6.76799 3.01298L20.018 12.063L20.018 12.063L20.0226 12.0661C20.3258 12.2682 20.3258 12.682 20.0226 12.8841L20.0226 12.884L20.0169 12.8879L6.76693 21.9879Z" fill="#FCFCFC" stroke="#FCFCFC"></path>
														</svg>
													</div>
												</td>
												<th scope="row" className="px-6 pl-1 py-4 flex gap-2 font-medium text-gray-900 whitespace-nowrap dark:text-white">
													<img className="md:w-14 md:h-14 w-8 h-8 rounded" src={track.album.images[0].url} alt={track.album.album_name} />
													<div>
														<p>{track.name}</p>
														{track.artists.slice(0, 2).map((item, index) => (
															<span className="font-normal text-gray-100 opacity-60 cursor-pointer" key={index} onClick={() => router.push('/artists/' + item.public_id)}>
																{item.name}
																{index !== track.artists.length - 1 && <span>, </span>}
															</span>
														))}
													</div>
												</th>
												<td className="px-6 py-4">{track.album.name}</td>
												<td className="px-6 py-4">Today</td>
												<td className="px-6 py-4">{`${Math.floor(track.duration_ms.toString().slice(0, 3) / 3600) > 0 ? Math.floor(track.duration_ms.toString().slice(0, 3) / 3600) + 'h ' : ''}${Math.floor((track.duration_ms.toString().slice(0, 3) % 3600) / 60)}m ${track.duration_ms.toString().slice(0, 3) % 60}s`}</td>
											</tr>
										))}
									</tbody>
								</table>
							)}
						</div>
					</div>
				</div>
			</main>
		</>
	);
}
